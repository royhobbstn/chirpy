{"version":3,"sources":["Menu.js","Redux/thunks.js","Redux/actions.js","MenuContainer.js","App.js","AppContainer.js","Service/authentication.js","serviceWorker.js","Redux/reducer.js","Redux/combine_reducers.js","index.js"],"names":["Menu","reloadData","className","onClick","window","localStorage","clear","location","reload","thunkLoadInitialData","dispatch","getState","fetch","process","headers","Accept","method","body","JSON","stringify","key","getItem","secret","then","response","json","type","data","MenuContainer","connect","state","App","map","generateTweet","tweet","linkedTweet","full_text","parse","media_key","entities","urls","forEach","url","text","Array","from","slice","indices","join","expanded","expanded_url","display","display_url","media","item","media_url","media_url_https","he","decode","Object","keys","k","reactStringReplace","match","i","href","target","rel","media_url_array","split","extension","pop","ext_query","removed_type","append_querystring_lg","style","paddingTop","length","replaceLinks","id_str","user","screen_name","AppContainer","main","a","currentToken1","currentToken2","currentToken3","encodeURIComponent","res","setItem","oauth_token","oauth_token_secret","catch","err","console","log","urlParams","URLSearchParams","search","has","get","oauthVerifier","currentToken4","currentToken5","currentToken6","currentToken7","verifier","accTkn","accTknSecret","userId","screenName","history","replaceState","document","title","Boolean","hostname","default_state","action","assign","Store","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","runAuthentication","result","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.76e7d74d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Menu({ reloadData }) {\n  return (\n    <div className=\"menu\">\n      <div className=\"menu-container\">\n        <button\n          className=\"menu-button\"\n          onClick={() => {\n            reloadData();\n          }}\n        >\n          Fetch New\n        </button>\n        <button\n          className=\"menu-button float-right\"\n          onClick={function() {\n            window.localStorage.clear();\n            window.location.reload();\n          }}\n        >\n          ReAuth\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","/* global fetch */\n\nimport { loadInitialData } from \"./actions.js\";\n\nexport function thunkLoadInitialData() {\n  return (dispatch, getState) => {\n    return fetch(`${process.env.REACT_APP_API_URL}getData`, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        key: window.localStorage.getItem(\"access_token_key\"),\n        secret: window.localStorage.getItem(\"access_token_secret\")\n      })\n    })\n      .then(response => response.json())\n      .then(response => {\n        dispatch(loadInitialData(response));\n      });\n  };\n}\n","export function loadInitialData(data) {\n  return {\n    type: \"LOAD_INITIAL_DATA\",\n    data\n  };\n}\n\nexport function clearData() {\n  return {\n    type: \"CLEAR_DATA\"\n  };\n}\n","import { connect } from \"react-redux\";\nimport Menu from \"./Menu\";\nimport { thunkLoadInitialData } from \"./Redux/thunks\";\nimport { clearData } from \"./Redux/actions\";\n\nconst mapStateToProps = state => {\n  return {};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    reloadData() {\n      dispatch(clearData());\n      dispatch(thunkLoadInitialData());\n    }\n  };\n};\n\nconst MenuContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Menu);\n\nexport default MenuContainer;\n","import React from \"react\";\nimport reactStringReplace from \"react-string-replace\";\nimport MenuContainer from \"./MenuContainer\";\nimport he from \"he\";\n\nfunction App({ data }) {\n  return (\n    <div>\n      <MenuContainer />\n      {data.map(generateTweet)}\n    </div>\n  );\n}\n\nexport default App;\n\nfunction generateTweet(tweet) {\n  const linkedTweet = replaceLinks(tweet);\n\n  return (\n    <div key={tweet.id_str} className=\"card container\">\n      <div className=\"buffer\">\n        <span className=\"bold\">@{tweet.user.screen_name}&nbsp;&nbsp;</span>\n        <pre>{linkedTweet}</pre>\n      </div>\n    </div>\n  );\n}\n\nfunction replaceLinks(tweet) {\n  const tweet_copy = JSON.parse(JSON.stringify(tweet));\n\n  let full_text = tweet_copy.full_text;\n\n  const key = {};\n  const media_key = {};\n\n  // create a text replace system using url indices\n  tweet.entities.urls.forEach(url => {\n    const text = Array.from(tweet.full_text)\n      .slice(url.indices[0], url.indices[1])\n      .join(\"\");\n    key[text] = { expanded: url.expanded_url, display: url.display_url };\n  });\n\n  tweet.entities.media &&\n    tweet.entities.media.forEach(item => {\n      const text = Array.from(tweet.full_text)\n        .slice(item.indices[0], item.indices[1])\n        .join(\"\");\n      media_key[text] = { media_url: item.media_url_https, type: item.type };\n    });\n\n  full_text = he.decode(full_text);\n  Object.keys(key).forEach(k => {\n    full_text = reactStringReplace(full_text, k, (match, i) => (\n      <a\n        href={key[k].expanded}\n        key={k}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        {key[k].display}\n      </a>\n    ));\n  });\n\n  Object.keys(media_key).forEach(k => {\n    const media_url_array = media_key[k].media_url.split(\".\");\n    const extension = media_url_array.pop();\n    const ext_query =\n      extension === \"jpeg\" || extension === \"jpg\" ? \"jpg\" : \"png\";\n    const removed_type = media_url_array.join(\".\");\n\n    const append_querystring_lg = `${removed_type}?format=${ext_query}&name=large`;\n\n    full_text = reactStringReplace(full_text, k, (match, i) => (\n      <a\n        key={k}\n        style={{ display: \"block\", paddingTop: \"10px\" }}\n        href={append_querystring_lg}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        [Img:{\" \"}\n        {removed_type.length > 24\n          ? removed_type.slice(0, 21) + \"...\"\n          : removed_type}\n        ]\n      </a>\n    ));\n  });\n\n  return full_text;\n}\n","import { connect } from \"react-redux\";\nimport App from \"./App\";\n\nconst mapStateToProps = state => {\n  return {\n    data: state.main.data\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {};\n};\n\nconst AppContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n\nexport default AppContainer;\n","//\n\nexport async function runAuthentication() {\n  const currentToken1 = window.localStorage.getItem(\"oauth_token\");\n  const currentToken2 = window.localStorage.getItem(\"oauth_token_secret\");\n  const currentToken3 = window.localStorage.getItem(\"oauth_verifier\");\n\n  if (!currentToken1 || !currentToken2) {\n    // get app oauth tokens\n    await fetch(\n      `${\n        process.env.REACT_APP_API_URL\n      }getAuthTokens?callback=${window.encodeURIComponent(\n        process.env.REACT_APP_CALLBACK_URL\n      )}`\n    )\n      .then(res => res.json())\n      .then(response => {\n        // {\"oauth_token\":\"\",\"oauth_token_secret\":\"\",\"oauth_callback_confirmed\":\"true\"}\n        window.localStorage.setItem(\"oauth_token\", response.oauth_token);\n        window.localStorage.setItem(\n          \"oauth_token_secret\",\n          response.oauth_token_secret\n        );\n        window.location.href = `https://api.twitter.com/oauth/authorize?oauth_token=${response.oauth_token}`;\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  // this will run when redirect process appends querystring to url\n  if (currentToken1 && currentToken2 && !currentToken3) {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (urlParams.has(\"oauth_token\") && urlParams.has(\"oauth_verifier\")) {\n      if (urlParams.get(\"oauth_token\") === currentToken1) {\n        window.localStorage.setItem(\n          \"oauth_verifier\",\n          urlParams.get(\"oauth_verifier\")\n        );\n      }\n    }\n  }\n\n  const oauthVerifier = window.localStorage.getItem(\"oauth_verifier\");\n  const currentToken4 = window.localStorage.getItem(\"access_token_key\");\n  const currentToken5 = window.localStorage.getItem(\"access_token_secret\");\n  const currentToken6 = window.localStorage.getItem(\"user_id\");\n  const currentToken7 = window.localStorage.getItem(\"screen_name\");\n\n  if (\n    oauthVerifier &&\n    (!currentToken4 || !currentToken5 || !currentToken6 || !currentToken7)\n  ) {\n    // get user access tokens\n    await fetch(`${process.env.REACT_APP_API_URL}getAccessTokens`, {\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      method: \"POST\",\n      body: JSON.stringify({\n        key: window.localStorage.getItem(\"oauth_token\"),\n        secret: window.localStorage.getItem(\"oauth_token_secret\"),\n        verifier: window.localStorage.getItem(\"oauth_verifier\")\n      })\n    })\n      .then(response => response.json())\n      .then(response => {\n        window.localStorage.setItem(\"access_token_key\", response.accTkn);\n        window.localStorage.setItem(\n          \"access_token_secret\",\n          response.accTknSecret\n        );\n        window.localStorage.setItem(\"user_id\", response.userId);\n        window.localStorage.setItem(\"screen_name\", response.screenName);\n        window.history.replaceState({}, document.title, \"/\");\n        window.location.reload();\n      });\n  }\n\n  if (\n    oauthVerifier &&\n    currentToken4 &&\n    currentToken5 &&\n    currentToken6 &&\n    currentToken7\n  ) {\n    return true;\n  } else {\n    return false;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// reducer\n\nconst default_state = {\n  data: []\n};\n\nconst main = (state = default_state, action) => {\n  switch (action.type) {\n    case \"LOAD_INITIAL_DATA\":\n      return Object.assign({}, state, {\n        data: action.data\n      });\n    case \"CLEAR_DATA\":\n      return Object.assign({}, state, {\n        data: []\n      });\n    default:\n      return state;\n  }\n};\n\nexport default main;\n","import { combineReducers } from \"redux\";\nimport main from \"./reducer.js\";\n\nconst Store = combineReducers({\n  main\n});\n\nexport default Store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport AppContainer from \"./AppContainer\";\nimport { runAuthentication } from \"./Service/authentication\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { thunkLoadInitialData } from \"./Redux/thunks\";\nimport Store from \"./Redux/combine_reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nexport const store = createStore(\n  Store,\n  composeEnhancers(applyMiddleware(thunk))\n);\n\nrunAuthentication()\n  .then(async result => {\n    if (result === true) {\n      store.dispatch(thunkLoadInitialData());\n    }\n  })\n  .catch(err => {\n    console.log(err);\n  });\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}